# -*- coding: utf-8 -*-
"""stock_prediction_regression.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/13zhp2Gr2xZ9wSRfNWpZZjQWHW4IWF9rv

# Stock Predictions with Regression

### Predict end of week (eow) closing price

- import dependencies
- import dataset
- make regression algorithms
- make predictions
"""

!pip install yfinance --upgrade --no-cache-dir

## Further  recommendation, test multiple frameworks, see what works better on average. 
## Open source RL: https://docs.google.com/spreadsheets/d/1EeFPd-XIQ3mq_9snTlAZSsFY7Hbnmd7P5bbT8LPuMn0/edit#gid=0

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from matplotlib import style

# Adjusting the size of matplotlib
import matplotlib as mpl
mpl.rc('figure', figsize=(8, 7))
mpl.__version__

import seaborn as sns
sns.set()

# machine learning
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.linear_model import LassoLars
from sklearn.linear_model import Ridge
from sklearn.linear_model import BayesianRidge
from sklearn.linear_model import TheilSenRegressor

# metrics
from sklearn.metrics import r2_score
from sklearn.metrics import mean_squared_error

# Commented out IPython magic to ensure Python compatibility.
## Save future files to your drive
## In this notebook control for multiple testing
from google.colab import drive
drive.mount('/content/drive',force_remount=True)
# %cd "/content/drive/My Drive/Colab Notebooks/Stock Prediction with Regression"
! if test -d "input"; then rm -r "input"; fi
# %mkdir "input"

from pandas_datareader import data as pdr
import fix_yahoo_finance as yf
yf.pdr_override()
TICKER="SHOP"
INPUT_DATA = "input/%s.csv" % TICKER
df_full = pdr.get_data_yahoo(TICKER, interval="5d", period="max").reset_index()
df_full.to_csv(INPUT_DATA,index=False)

df_full = pd.read_csv(INPUT_DATA)
df_full.head()

df_full.tail()

df_full.columns.values

df_full.info()
df_full.describe()

"""## Notes
- all features do not have missing data (in terms of count)
- 1088 number of data for every features
- no "bad/null/empty" data as `min` of all features has a value (except `Volume` as day 1 is 0)

- removing following features:
 - `Date, High, Low, Adj Close`: not relevant for training

- adding following features:
 - `next_eow_close`: using this as target feature as we want to predict the next end of week closing price based on this week's performance
"""

# Create new feature which will be the target price (next day)
# Remove last row as it doesn't have a next_day_close value
remove_features = ['Date', 'High', 'Low', 'Adj Close']
rename_mapper = {'Open': 'open', 'Close': 'close', 'Volume': 'volume'}
df_full['next_day_close'] = pd.Series(np.append(df_full['Close'][1:].to_numpy(), [0]))
df_full.drop(df_full.tail(1).index, inplace=True)
df_full.drop(remove_features, axis=1, inplace=True)
df_full.rename(columns=rename_mapper, inplace=True)

train, test = train_test_split(df_full, test_size=0.1, shuffle=False)
train.info()
test.info()

train.head()

def plot_prediction(regressor, y_pred, y_actual):
    close_price = y_actual
    pred_price = pd.Series(y_pred, index=close_price.index.values)
    close_price.head(15).plot(label='actual')
    pred_price.head(15).plot(label='prediction')
    title = "%s on %s ticker" % (regressor.strip(), TICKER)
    plt.title(title)
    plt.legend()

# Set up training and testing data
X_train = train.drop("next_day_close", axis=1)
Y_train = train["next_day_close"]
X_test = test.drop("next_day_close", axis=1)
Y_expected = test["next_day_close"]
X_train.shape, Y_train.shape, X_test.shape

# Linear Regression

linear_reg = LinearRegression()
linear_reg.fit(X_train, Y_train)
Y_pred = linear_reg.predict(X_test)
linear_r2 = r2_score(Y_expected, Y_pred)
linear_mse = mean_squared_error(Y_expected, Y_pred)
print("Linear Regression\n", "R2: ", linear_r2, "MSE:" ,linear_mse)
plot_prediction("Linear Regression", Y_pred, test['close'])

# Lasso Lars

lassolars_reg = LassoLars()
lassolars_reg.fit(X_train, Y_train)
Y_pred = lassolars_reg.predict(X_test)
lassolars_r2 = r2_score(Y_expected, Y_pred)
lassolars_mse = mean_squared_error(Y_expected, Y_pred)
print("Lasso Lars Regression\n", "R2: ", lassolars_r2, "MSE:" ,lassolars_mse)
plot_prediction("Lasso Lars Regression", Y_pred, test['close'])

# Theil Sen Regressor

theil_reg = TheilSenRegressor()
theil_reg.fit(X_train, Y_train)
Y_pred = theil_reg.predict(X_test)
theil_r2 = r2_score(Y_expected, Y_pred)
theil_mse = mean_squared_error(Y_expected, Y_pred)
print("Theil Sen Regression\n", "R2: ", theil_r2, "MSE:" ,theil_mse)
plot_prediction("Theil Sen Regression", Y_pred, test['close'])

# Bayesian Ridge

bayesian_reg = BayesianRidge()
bayesian_reg.fit(X_train, Y_train)
Y_pred = bayesian_reg.predict(X_test)
bayesian_r2 = r2_score(Y_expected, Y_pred)
bayesian_mse = mean_squared_error(Y_expected, Y_pred)
print("Bayesian Ridge Regression\n", "R2: ", bayesian_r2, "MSE:" ,bayesian_mse)
plot_prediction("Bayesian Ridge Regression", Y_pred, test['close'])